<?php
class Validator
{
    protected $data = [];
    protected $registered_validators = ['natl_id'     => 'isIdValid',
                                        'license_num' => 'isLicenseNumValid',
                                        'first_name'  => 'isNameValid',
                                        'last_name'   => 'isNameValid',
                                        'email'       => 'isEmailValid',
                                        'telephone'   => 'isTelephoneValid',
                                        'address'     => 'isAddressValid',
                                        'add_driver'  =>  null,
                                        'cancel_add'  =>  null,
                                        'validation_done_by_js' =>  null,
                                    ];
    protected $errors = [];

    public function __construct(array $post_data)
    {
        if (empty($post_data)) {
            trigger_error('Validator initialized with empty data set', E_USER_WARNING);
        }
        $this->data = $post_data;
    }

    /**
     * Performs the validation on each data item stored in the $data property
     */
    public function validate() : bool
    {
        if (empty($this->data)) {
            trigger_error('No data received for validation', E_USER_WARNING);
            return true;
        }
        foreach($this->data as $key=>$value) {
            // if there is no registered validation method
            if (!array_key_exists($key, $this->registered_validators)) {
                $warning_msg = 'Form field ' . $key . ' has no registered validator method. Validation not done';
                trigger_error($warning_msg, E_USER_WARNING);
                $this->setErrors($warning_msg);
            }
            else {
                // get the registered validator
                $validator = $this->registered_validators[$key];
                // if validator method is null, no validation is required for that variable
                if (is_null($validator)) {
                    continue;
                }
                // check to make sure the method exists before calling it. Issue a warning if it doesn't
                if (!method_exists($this, $validator)) {
                    $warning_msg = 'Form field ' . $key . ' has a registered validator but no corresponding validator method. Validation not done';
                    trigger_error($warning_msg, E_USER_WARNING);
                    $this->setErrors($warning_msg);
                }
                else {
                    // remember that each validator should update the $errors property
                    // if the data is invalid
                    $this->$validator($value);
                }
            }
        }
        return (empty($this->errors) ? true : false);
    }

    /**
     * Returns the error messages generated by the validator
     * @return array
     */
    public function getErrors() : array
    {
        return $this->errors;
    }

    /**
     * Internal method to update the error message property
     * @param $err_msg  The generated error message
     */
    protected function setErrors(string $err_msg)
    {
        // abort with an error message if no err_msg was passed :-)
        if (empty($err_msg)) {
            trigger_error('Cannot create an empty error message', E_USER_ERROR);
        }
        $this->errors[] = $err_msg;
    }

    protected function isIdValid(string $id) : bool
    {
        $first_six = '';
        $last_four = '';
        
        if (empty($id)) {
            $this->setErrors('No value given for the national id');
            return false;
        }

        if (strstr($id, '-')) {
            // split the id into its corresponding parts since it's not empty and has a hyphen
            list($first_six, $last_four) = explode('-', $id);
        }
        else {
            $this->setErrors('Hyphen required for the national id number');
            return false;
        }
        
        if (empty($first_six) || empty($last_four)) {
            $this->setErrors('Format invalid - part of the id is missing');
            return false;
        }

        if (!ctype_digit($first_six) || !ctype_digit($last_four)) {
            $this->setErrors('Format invalid - part of the id does not contain numbers');
            return false;
        }

        if (strlen($first_six) <> 6 || strlen($last_four) <> 4) {
            $this->setErrors('Format invalid - part(s) of the id has an incorrect number of digits.');
            return false;
        }
        return true;
    }
}